diff --git a/node_modules/@jimp/custom/es/index.js b/node_modules/@jimp/custom/es/index.js
index ddc334e..ce571f8 100644
--- a/node_modules/@jimp/custom/es/index.js
+++ b/node_modules/@jimp/custom/es/index.js
@@ -1,55 +1,35 @@
-"use strict";
-
-var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");
-
-var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
-
-Object.defineProperty(exports, "__esModule", {
-  value: true
-});
-exports["default"] = configure;
-
-var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
-
-var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
-
-var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
-
-var _core = _interopRequireWildcard(require("@jimp/core"));
-
-function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }
-
-function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
-
-function configure(configuration) {
-  var jimpInstance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _core["default"];
-  var jimpConfig = {
+import Jimp, {
+  addType,
+  addJimpMethods,
+  addConstants,
+  jimpEvChange
+} from '@jimp/core';
+
+export default function configure(configuration, jimpInstance = Jimp) {
+  const jimpConfig = {
     hasAlpha: {},
     encoders: {},
     decoders: {},
-    "class": {},
+    class: {},
     constants: {}
   };
 
   function addToConfig(newConfig) {
-    Object.entries(newConfig).forEach(function (_ref) {
-      var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
-          key = _ref2[0],
-          value = _ref2[1];
-
-      jimpConfig[key] = _objectSpread({}, jimpConfig[key], {}, value);
+    Object.entries(newConfig).forEach(([key, value]) => {
+      jimpConfig[key] = {
+        ...jimpConfig[key],
+        ...value
+      };
     });
   }
 
   function addImageType(typeModule) {
-    var type = typeModule();
+    const type = typeModule();
 
     if (Array.isArray(type.mime)) {
-      _core.addType.apply(void 0, (0, _toConsumableArray2["default"])(type.mime));
+      addType(...type.mime);
     } else {
-      Object.entries(type.mime).forEach(function (mimeType) {
-        return _core.addType.apply(void 0, (0, _toConsumableArray2["default"])(mimeType));
-      });
+      Object.entries(type.mime).forEach(mimeType => addType(...mimeType));
     }
 
     delete type.mime;
@@ -57,13 +37,10 @@ function configure(configuration) {
   }
 
   function addPlugin(pluginModule) {
-    var plugin = pluginModule(_core.jimpEvChange) || {};
-
-    if (!plugin["class"] && !plugin.constants) {
+    const plugin = pluginModule(jimpEvChange) || {};
+    if (!plugin.class && !plugin.constants) {
       // Default to class function
-      addToConfig({
-        "class": plugin
-      });
+      addToConfig({ class: plugin });
     } else {
       addToConfig(plugin);
     }
@@ -71,17 +48,27 @@ function configure(configuration) {
 
   if (configuration.types) {
     configuration.types.forEach(addImageType);
-    jimpInstance.decoders = _objectSpread({}, jimpInstance.decoders, {}, jimpConfig.decoders);
-    jimpInstance.encoders = _objectSpread({}, jimpInstance.encoders, {}, jimpConfig.encoders);
-    jimpInstance.hasAlpha = _objectSpread({}, jimpInstance.hasAlpha, {}, jimpConfig.hasAlpha);
+
+    jimpInstance.decoders = {
+      ...jimpInstance.decoders,
+      ...jimpConfig.decoders
+    };
+    jimpInstance.encoders = {
+      ...jimpInstance.encoders,
+      ...jimpConfig.encoders
+    };
+    jimpInstance.hasAlpha = {
+      ...jimpInstance.hasAlpha,
+      ...jimpConfig.hasAlpha
+    };
   }
 
   if (configuration.plugins) {
     configuration.plugins.forEach(addPlugin);
   }
 
-  (0, _core.addJimpMethods)(jimpConfig["class"], jimpInstance);
-  (0, _core.addConstants)(jimpConfig.constants, jimpInstance);
-  return _core["default"];
+  addJimpMethods(jimpConfig.class, jimpInstance);
+  addConstants(jimpConfig.constants, jimpInstance);
+
+  return Jimp;
 }
-//# sourceMappingURL=index.js.map
\ No newline at end of file
